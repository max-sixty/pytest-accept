[tool.poetry]
authors = ["Maximilian Roos <m@maxroos.com>"]
description = "A pytest-plugin for updating doctest outputs"
homepage = "https://github.com/max-sixty/pytest-accept"
license = "Apache-2.0"
name = "pytest-accept"
readme = "README.md"
repository = "https://github.com/max-sixty/pytest-accept"
# Defined by poetry-dynamic-versioning
version = "0"

[tool.poetry-dynamic-versioning]
enable = true
pattern = 'v?(?P<base>[\d\.]+)'
# PyPI doesn't like commits being in the version
# Adjusted from https://github.com/mtkennerly/poetry-dynamic-versioning, no
# commit hash to make it compatible with test-pypi
format-jinja = "{% if distance == 0 %}{{ base }}{% else %}{{ base }}.dev{{ distance }}{% endif %}"

# format = "{base}.{distance}"

[tool.poetry.plugins."pytest11"]
accept = "pytest_accept"

[tool.poetry.dependencies]
pytest = ">=7"
python = ">=3.8, <4"

[tool.poetry.group.dev.dependencies]
astor = "^0.8.1"
# Keep versions of these five up to date with .pre-commit-config.yaml
black = ">=21.7,<25.0"
blackdoc = "^0.3.4"
mypy = "^1.8"
pre-commit = "^2.14.0"
ruff = "^0.6.4"
# Currently causing Windows to break on 3.10
# pdbpp = "^0.10.3"

[tool.isort]
default_section = "THIRDPARTY"
float_to_top = true
known_first_party = ["pytest-accept"]
profile = "black"
skip_gitignore = true

[tool.pytest.ini_options]
addopts = ["--strict-config", "--strict-markers", "--doctest-modules"]
doctest_optionflags = "NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL ELLIPSIS"
filterwarnings = [
  "error:::pytest_accept.*",
]
pytester_example_dir = "examples"
testpaths = [
  "pytest_accept",
]

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.0.2", "poetry-dynamic-versioning"]

[tool.ruff]
fix = true

[tool.ruff.lint]
ignore = [
  # ignores from `flak8`, though possibly ruff doesn't enforce those that
  # conflict with black?
  "E402", # module level import at top — too strict in some cases
  "E501", # line too long - defer to `black`
  "E731", # No lambdas — too strict
]
select = [
  "F", # Pyflakes
  "E", # Pycodestyle
  "W",
  "TID", # flake8-tidy-imports (absolute imports)
  "I", # isort
  "UP", # Pyupgrade
]

[tool.mypy]
files = "."
# TODO: ideally we would list the modules that aren't yet typed
ignore_missing_imports = true
